// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  clerkId      String         @unique
  firstName    String
  lastName     String
  userName     String?
  email        String         @unique
  profile_pic  String?
  listings     Listing[]
  createdAt    DateTime       @default(now())
  SavedListing SavedListing[]
}

model Listing {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  placeName     String
  description   String
  address       String
  city          String
  latitude      Float
  longitude     Float
  location      Location
  price         Float
  images        String[]
  type          Type
  property      Property
  bedroom       Int
  bathroom      Int
  createdAt     DateTime       @default(now())
  userId        String         @db.ObjectId
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  listingDetail ListingDetail?
  SavedListing  SavedListing[]
}

type Location {
  type        String  @default("Point")
  coordinates Float[]
}

enum Property {
  apartment
  house
  condo
  land
}

enum Type {
  buy
  rent
}

model ListingDetail {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  utilities String?
  pet       String?
  income    String?
  size      Int?
  school    Int?
  bus       Int?
  railway   Int?
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId String  @unique @db.ObjectId
}

model SavedListing {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  userId    String   @unique @db.ObjectId
  listingId String   @unique @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, listingId])
}
